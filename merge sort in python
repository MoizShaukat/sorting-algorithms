# 1. If the input list is empty, return an empty list.
# 2. If the input list has one item, return the item.
# 3. Otherwise, divide the input list into two halves.
# 4. Call merge_sort() on the first half, and call merge_sort() on the second half.
# 5. Merge the two sorted halves together.
# Time Complexity: O(n log n)
def merge_lists(left_sublist, right_sublist):
    i = 0
    j = 0
    result = []
    
    while i < len(left_sublist) and j < len(right_sublist):
        if left_sublist[i] <= right_sublist[j]:
            result.append(left_sublist[i])
            i += 1
        else:
            result.append(right_sublist[j])
            j += 1
            
    result += left_sublist[i:]
    result += right_sublist[j:]
    
    return result


def merge_sort(input_list):
    
    if len(input_list) <= 1:
        return input_list
    else:
        midpoint = int(len(input_list)/2)
        
        left_sublist = merge_sort(input_list[:midpoint])
        right_sublist = merge_sort(input_list[midpoint:])
        
        return merge_lists(left_sublist, right_sublist)
    
num_list = [6,3,8,1,5,2,7,9,4]
print(merge_sort(num_list))
